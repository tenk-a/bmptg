/**
 *  @file   FixedClut256.hpp
 *  @brief  clutに従って32ビット色画を8ビット色画に変換. デフォルトclutの作成.
 *  @author Masashi KITAMURA
 */

#ifndef FIXEDCLUT256_H
#define FIXEDCLUT256_H

#pragma once

#include <cstddef>
#include <cstring>
#include <cassert>



/// clutに従って32ビット色画を8ビット色画に変換. デフォルトclutの作成.
template<class A=int>
class FixedClut256 {
public:
    /// デフォルトパレットの作成.必ず256色分のメモリを用意のこと. bpp=3,4,6,8   typ:0=jpn 1=win. ...
    static void getFixedClut256(unsigned *clut, unsigned clutSize, unsigned clutBpp, unsigned typ=0);

    /// clutに従って32ビット色画を8ビット色画に変換.
    static bool decreaseColor(unsigned char* pDst, const unsigned* pSrc, unsigned w, unsigned h
                    , const unsigned* pClut, unsigned clutSize, unsigned idx=0, int alp1=0, int alp2=0, int type=0);

    /// 8色への減色.
    static bool decreaseColorRGB111(unsigned char* dst, const unsigned* src, unsigned w, unsigned h, bool win, bool ex=false);

	/// 32ビット色画を固定16色画に変換.
	static bool decreaseColorRGB_bpp4(unsigned char* dst, const unsigned* src, unsigned w, unsigned h, bool win);

public:
    /// g1r1b1 デジタル8色. (古い日本のパソコンのパレット番号に合わせたもの)
    static const unsigned* clutGRB111() {
        static const unsigned jpn8[] = {
            0xFF000000, 0xFF0000ff, 0xFFff0000, 0xFFff00ff, 0xFF00ff00, 0xFF00ffff, 0xFFffff00, 0xFFffffff,
        };
        return jpn8;
    }

    /// 古い日本のパソコンのデフォルトパレット(じゃないかもだけど、それに近いもの)
    static const unsigned* clutJpn16() {
        static const unsigned jpn16[] = {
            0xFF000000, 0xFF0000ff, 0xFFff0000, 0xFFff00ff, 0xFF00ff00, 0xFF00ffff, 0xFFffff00, 0xFFffffff,
            0xFF808080, 0xFF000080, 0xFF800000, 0xFF800080, 0xFF008000, 0xFF008080, 0xFF808000, 0xFFc0c0c0,
        };
        return jpn16;
    }

    /// dos/winな8色(じゃないかもだけど)
    static const unsigned* clutBGR111() {
        static const unsigned win8[] = {
            0xFF000000, 0xFFff0000, 0xFF00ff00, 0xFFffff00, 0xFF0000ff, 0xFFff00ff, 0xFF00ffff, 0xFFffffff,
        };
        return win8;
    }

    /// dos/winな16色.
    static const unsigned* clutWin16() {
        static const unsigned win16[] = {
            0xFF000000, 0xFF800000, 0xFF008000, 0xFF808000, 0xFF000080, 0xFF800080, 0xFF008080, 0xFFc0c0c0,
            0xFF808080, 0xFFff0000, 0xFF00ff00, 0xFFffff00, 0xFF0000ff, 0xFFff00ff, 0xFF00ffff, 0xFFffffff,
        };
        return win16;
    }

    /// 
    static const unsigned* clut2() {
        static const unsigned clut[] = {
            0xFF000000, 0xFFffffff,
        };
        return clut;
    }
    static const unsigned* clut4() {
        static const unsigned clut[] = {
            0xFF000000, 0xFF0000ff, 0xFF00ffff, 0xFFffffff,
        };
        return clut;
    }

    /// 固定 GRB(各4階調) 64色. (g2r2b2)
    static const unsigned* clutGRB222() {
        static const unsigned grb222[] = {
            0xff000000,0xff000055,0xff0000aa,0xff0000ff,0xff550000,0xff550055,0xff5500aa,0xff5500ff,
            0xffaa0000,0xffaa0055,0xffaa00aa,0xffaa00ff,0xffff0000,0xffff0055,0xffff00aa,0xffff00ff,
            0xff005500,0xff005555,0xff0055aa,0xff0055ff,0xff555500,0xff555555,0xff5555aa,0xff5555ff,
            0xffaa5500,0xffaa5555,0xffaa55aa,0xffaa55ff,0xffff5500,0xffff5555,0xffff55aa,0xffff55ff,
            0xff00aa00,0xff00aa55,0xff00aaaa,0xff00aaff,0xff55aa00,0xff55aa55,0xff55aaaa,0xff55aaff,
            0xffaaaa00,0xffaaaa55,0xffaaaaaa,0xffaaaaff,0xffffaa00,0xffffaa55,0xffffaaaa,0xffffaaff,
            0xff00ff00,0xff00ff55,0xff00ffaa,0xff00ffff,0xff55ff00,0xff55ff55,0xff55ffaa,0xff55ffff,
            0xffaaff00,0xffaaff55,0xffaaffaa,0xffaaffff,0xffffff00,0xffffff55,0xffffffaa,0xffffffff,
        };
        return grb222;
    }

    /// 128色. rgb 各5階調 + 3色.
    static const unsigned* clut_g5r5b5c3() {
        static const unsigned clut[] = {
            0x00000000,
            0xff000000,0xff00003f,0xff00007f,0xff0000bf,0xff0000ff,
            0xff3f0000,0xff3f003f,0xff3f007f,0xff3f00bf,0xff3f00ff,
            0xff7f0000,0xff7f003f,0xff7f007f,0xff7f00bf,0xff7f00ff,
            0xffbf0000,0xffbf003f,0xffbf007f,0xffbf00bf,0xffbf00ff,
            0xffff0000,0xffff003f,0xffff007f,0xffff00bf,0xffff00ff,
            0xff003f00,0xff003f3f,0xff003f7f,0xff003fbf,0xff003fff,
            0xff3f3f00,0xff3f3f3f,0xff3f3f7f,0xff3f3fbf,0xff3f3fff,
            0xff7f3f00,0xff7f3f3f,0xff7f3f7f,0xff7f3fbf,0xff7f3fff,
            0xffbf3f00,0xffbf3f3f,0xffbf3f7f,0xffbf3fbf,0xffbf3fff,
            0xffff3f00,0xffff3f3f,0xffff3f7f,0xffff3fbf,0xffff3fff,
            0xff007f00,0xff007f3f,0xff007f7f,0xff007fbf,0xff007fff,
            0xff3f7f00,0xff3f7f3f,0xff3f7f7f,0xff3f7fbf,0xff3f7fff,
            0xff7f7f00,0xff7f7f3f,0xff7f7f7f,0xff7f7fbf,0xff7f7fff,
            0xffbf7f00,0xffbf7f3f,0xffbf7f7f,0xffbf7fbf,0xffbf7fff,
            0xffff7f00,0xffff7f3f,0xffff7f7f,0xffff7fbf,0xffff7fff,
            0xff00bf00,0xff00bf3f,0xff00bf7f,0xff00bfbf,0xff00bfff,
            0xff3fbf00,0xff3fbf3f,0xff3fbf7f,0xff3fbfbf,0xff3fbfff,
            0xff7fbf00,0xff7fbf3f,0xff7fbf7f,0xff7fbfbf,0xff7fbfff,
            0xffbfbf00,0xffbfbf3f,0xffbfbf7f,0xffbfbfbf,0xffbfbfff,
            0xffffbf00,0xffffbf3f,0xffffbf7f,0xffffbfbf,0xffffbfff,
            0xff00ff00,0xff00ff3f,0xff00ff7f,0xff00ffbf,0xff00ffff,
            0xff3fff00,0xff3fff3f,0xff3fff7f,0xff3fffbf,0xff3fffff,
            0xff7fff00,0xff7fff3f,0xff7fff7f,0xff7fffbf,0xff7fffff,
            0xffbfff00,0xffbfff3f,0xffbfff7f,0xffbfffbf,0xffbfffff,
            0xffffff00,0xffffff3f,0xffffff7f,0xffffffbf,0xffffffff,
            0xffaaaaaa,0xffeeeeee,
        };
        return clut;
    }

    /// winのシステム256色.
    static const unsigned* clutWin256() {
        static const unsigned win256[] = {
            0xFF000000,0xFF800000,0xFF008000,0xFF808000,0xFF000080,0xFF800080,0xFF008080,0xFF808080,
            0xFFc0dcc0,0xFFa6caf0,0xFF2a3faa,0xFF2a3fff,0xFF2a5f00,0xFF2a5f55,0xFF2a5faa,0xFF2a5fff,
            0xFF2a7f00,0xFF2a7f55,0xFF2a7faa,0xFF2a7fff,0xFF2a9f00,0xFF2a9f55,0xFF2a9faa,0xFF2a9fff,
            0xFF2abf00,0xFF2abf55,0xFF2abfaa,0xFF2abfff,0xFF2adf00,0xFF2adf55,0xFF2adfaa,0xFF2adfff,
            0xFF2aff00,0xFF2aff55,0xFF2affaa,0xFF2affff,0xFF550000,0xFF550055,0xFF5500aa,0xFF5500ff,
            0xFF551f00,0xFF551f55,0xFF551faa,0xFF551fff,0xFF553f00,0xFF553f55,0xFF553faa,0xFF553fff,
            0xFF555f00,0xFF555f55,0xFF555faa,0xFF555fff,0xFF557f00,0xFF557f55,0xFF557faa,0xFF557fff,
            0xFF559f00,0xFF559f55,0xFF559faa,0xFF559fff,0xFF55bf00,0xFF55bf55,0xFF55bfaa,0xFF55bfff,
            0xFF55df00,0xFF55df55,0xFF55dfaa,0xFF55dfff,0xFF55ff00,0xFF55ff55,0xFF55ffaa,0xFF55ffff,
            0xFF7f0000,0xFF7f0055,0xFF7f00aa,0xFF7f00ff,0xFF7f1f00,0xFF7f1f55,0xFF7f1faa,0xFF7f1fff,
            0xFF7f3f00,0xFF7f3f55,0xFF7f3faa,0xFF7f3fff,0xFF7f5f00,0xFF7f5f55,0xFF7f5faa,0xFF7f5fff,
            0xFF7f7f00,0xFF7f7f55,0xFF7f7faa,0xFF7f7fff,0xFF7f9f00,0xFF7f9f55,0xFF7f9faa,0xFF7f9fff,
            0xFF7fbf00,0xFF7fbf55,0xFF7fbfaa,0xFF7fbfff,0xFF7fdf00,0xFF7fdf55,0xFF7fdfaa,0xFF7fdfff,
            0xFF7fff00,0xFF7fff55,0xFF7fffaa,0xFF7fffff,0xFFaa0000,0xFFaa0055,0xFFaa00aa,0xFFaa00ff,
            0xFFaa1f00,0xFFaa1f55,0xFFaa1faa,0xFFaa1fff,0xFFaa3f00,0xFFaa3f55,0xFFaa3faa,0xFFaa3fff,
            0xFFaa5f00,0xFFaa5f55,0xFFaa5faa,0xFFaa5fff,0xFFaa7f00,0xFFaa7f55,0xFFaa7faa,0xFFaa7fff,
            0xFFaa9f00,0xFFaa9f55,0xFFaa9faa,0xFFaa9fff,0xFFaabf00,0xFFaabf55,0xFFaabfaa,0xFFaabfff,
            0xFFaadf00,0xFFaadf55,0xFFaadfaa,0xFFaadfff,0xFFaaff00,0xFFaaff55,0xFFaaffaa,0xFFaaffff,
            0xFFd40000,0xFFd40055,0xFFd400aa,0xFFd400ff,0xFFd41f00,0xFFd41f55,0xFFd41faa,0xFFd41fff,
            0xFFd43f00,0xFFd43f55,0xFFd43faa,0xFFd43fff,0xFFd45f00,0xFFd45f55,0xFFd45faa,0xFFd45fff,
            0xFFd47f00,0xFFd47f55,0xFFd47faa,0xFFd47fff,0xFFd49f00,0xFFd49f55,0xFFd49faa,0xFFd49fff,
            0xFFd4bf00,0xFFd4bf55,0xFFd4bfaa,0xFFd4bfff,0xFFd4df00,0xFFd4df55,0xFFd4dfaa,0xFFd4dfff,
            0xFFd4ff00,0xFFd4ff55,0xFFd4ffaa,0xFFd4ffff,0xFFff0055,0xFFff00aa,0xFFff1f00,0xFFff1f55,
            0xFFff1faa,0xFFff1fff,0xFFff3f00,0xFFff3f55,0xFFff3faa,0xFFff3fff,0xFFff5f00,0xFFff5f55,
            0xFFff5faa,0xFFff5fff,0xFFff7f00,0xFFff7f55,0xFFff7faa,0xFFff7fff,0xFFff9f00,0xFFff9f55,
            0xFFff9faa,0xFFff9fff,0xFFffbf00,0xFFffbf55,0xFFffbfaa,0xFFffbfff,0xFFffdf00,0xFFffdf55,
            0xFFffdfaa,0xFFffdfff,0xFFffff55,0xFFffffaa,0xFFccccff,0xFFffccff,0xFF33ffff,0xFF66ffff,
            0xFF99ffff,0xFFccffff,0xFF007f00,0xFF007f55,0xFF007faa,0xFF007fff,0xFF009f00,0xFF009f55,
            0xFF009faa,0xFF009fff,0xFF00bf00,0xFF00bf55,0xFF00bfaa,0xFF00bfff,0xFF00df00,0xFF00df55,
            0xFF00dfaa,0xFF00dfff,0xFF00ff55,0xFF00ffaa,0xFF2a0000,0xFF2a0055,0xFF2a00aa,0xFF2a00ff,
            0xFF2a1f00,0xFF2a1f55,0xFF2a1faa,0xFF2a1fff,0xFF2a3f00,0xFF2a3f55,0xFFfffbf0,0xFFa0a0a4,
            0xFF808080,0xFFff0000,0xFF00ff00,0xFFffff00,0xFF0000ff,0xFFff00ff,0xFF00ffff,0xFFffffff,
        };
        return win256;
    }

    /// 固定GRB 256色. (g3r3b2) (G,R 8階調 B 4階調)
    static const unsigned* clutGRB332() {
        static const unsigned grb332[] = {
            0xff000000,0xff000055,0xff0000aa,0xff0000ff,0xff240000,0xff240055,0xff2400aa,0xff2400ff,
            0xff490000,0xff490055,0xff4900aa,0xff4900ff,0xff6d0000,0xff6d0055,0xff6d00aa,0xff6d00ff,
            0xff920000,0xff920055,0xff9200aa,0xff9200ff,0xffb60000,0xffb60055,0xffb600aa,0xffb600ff,
            0xffdb0000,0xffdb0055,0xffdb00aa,0xffdb00ff,0xffff0000,0xffff0055,0xffff00aa,0xffff00ff,
            0xff002400,0xff002455,0xff0024aa,0xff0024ff,0xff242400,0xff242455,0xff2424aa,0xff2424ff,
            0xff492400,0xff492455,0xff4924aa,0xff4924ff,0xff6d2400,0xff6d2455,0xff6d24aa,0xff6d24ff,
            0xff922400,0xff922455,0xff9224aa,0xff9224ff,0xffb62400,0xffb62455,0xffb624aa,0xffb624ff,
            0xffdb2400,0xffdb2455,0xffdb24aa,0xffdb24ff,0xffff2400,0xffff2455,0xffff24aa,0xffff24ff,
            0xff004900,0xff004955,0xff0049aa,0xff0049ff,0xff244900,0xff244955,0xff2449aa,0xff2449ff,
            0xff494900,0xff494955,0xff4949aa,0xff4949ff,0xff6d4900,0xff6d4955,0xff6d49aa,0xff6d49ff,
            0xff924900,0xff924955,0xff9249aa,0xff9249ff,0xffb64900,0xffb64955,0xffb649aa,0xffb649ff,
            0xffdb4900,0xffdb4955,0xffdb49aa,0xffdb49ff,0xffff4900,0xffff4955,0xffff49aa,0xffff49ff,
            0xff006d00,0xff006d55,0xff006daa,0xff006dff,0xff246d00,0xff246d55,0xff246daa,0xff246dff,
            0xff496d00,0xff496d55,0xff496daa,0xff496dff,0xff6d6d00,0xff6d6d55,0xff6d6daa,0xff6d6dff,
            0xff926d00,0xff926d55,0xff926daa,0xff926dff,0xffb66d00,0xffb66d55,0xffb66daa,0xffb66dff,
            0xffdb6d00,0xffdb6d55,0xffdb6daa,0xffdb6dff,0xffff6d00,0xffff6d55,0xffff6daa,0xffff6dff,
            0xff009200,0xff009255,0xff0092aa,0xff0092ff,0xff249200,0xff249255,0xff2492aa,0xff2492ff,
            0xff499200,0xff499255,0xff4992aa,0xff4992ff,0xff6d9200,0xff6d9255,0xff6d92aa,0xff6d92ff,
            0xff929200,0xff929255,0xff9292aa,0xff9292ff,0xffb69200,0xffb69255,0xffb692aa,0xffb692ff,
            0xffdb9200,0xffdb9255,0xffdb92aa,0xffdb92ff,0xffff9200,0xffff9255,0xffff92aa,0xffff92ff,
            0xff00b600,0xff00b655,0xff00b6aa,0xff00b6ff,0xff24b600,0xff24b655,0xff24b6aa,0xff24b6ff,
            0xff49b600,0xff49b655,0xff49b6aa,0xff49b6ff,0xff6db600,0xff6db655,0xff6db6aa,0xff6db6ff,
            0xff92b600,0xff92b655,0xff92b6aa,0xff92b6ff,0xffb6b600,0xffb6b655,0xffb6b6aa,0xffb6b6ff,
            0xffdbb600,0xffdbb655,0xffdbb6aa,0xffdbb6ff,0xffffb600,0xffffb655,0xffffb6aa,0xffffb6ff,
            0xff00db00,0xff00db55,0xff00dbaa,0xff00dbff,0xff24db00,0xff24db55,0xff24dbaa,0xff24dbff,
            0xff49db00,0xff49db55,0xff49dbaa,0xff49dbff,0xff6ddb00,0xff6ddb55,0xff6ddbaa,0xff6ddbff,
            0xff92db00,0xff92db55,0xff92dbaa,0xff92dbff,0xffb6db00,0xffb6db55,0xffb6dbaa,0xffb6dbff,
            0xffdbdb00,0xffdbdb55,0xffdbdbaa,0xffdbdbff,0xffffdb00,0xffffdb55,0xffffdbaa,0xffffdbff,
            0xff00ff00,0xff00ff55,0xff00ffaa,0xff00ffff,0xff24ff00,0xff24ff55,0xff24ffaa,0xff24ffff,
            0xff49ff00,0xff49ff55,0xff49ffaa,0xff49ffff,0xff6dff00,0xff6dff55,0xff6dffaa,0xff6dffff,
            0xff92ff00,0xff92ff55,0xff92ffaa,0xff92ffff,0xffb6ff00,0xffb6ff55,0xffb6ffaa,0xffb6ffff,
            0xffdbff00,0xffdbff55,0xffdbffaa,0xffdbffff,0xffffff00,0xffffff55,0xffffffaa,0xffffffff,
        };
        return grb332;
    }

    /// xterm256 rgb 各6階調 + 40色. システムカラー16色. モノクロ 24.
    static const unsigned* clutXterm256() {
        static const unsigned clut[] = {
            0xff000000,0xff800000,0xff008000,0xff808000,0xff000080,0xff800080,0xff008080,0xffc0c0c0,
            0xff808080,0xffff0000,0xff00ff00,0xffffff00,0xff0000ff,0xffff00ff,0xff00ffff,0xffffffff,
            0xff000000,0xff00005f,0xff000087,0xff0000af,0xff0000d7,0xff0000ff,0xff005f00,0xff005f5f,
            0xff005f87,0xff005faf,0xff005fd7,0xff005fff,0xff008700,0xff00875f,0xff008787,0xff0087af,
            0xff0087d7,0xff0087ff,0xff00af00,0xff00af5f,0xff00af87,0xff00afaf,0xff00afd7,0xff00afff,
            0xff00d700,0xff00d75f,0xff00d787,0xff00d7af,0xff00d7d7,0xff00d7ff,0xff00ff00,0xff00ff5f,
            0xff00ff87,0xff00ffaf,0xff00ffd7,0xff00ffff,0xff5f0000,0xff5f005f,0xff5f0087,0xff5f00af,
            0xff5f00d7,0xff5f00ff,0xff5f5f00,0xff5f5f5f,0xff5f5f87,0xff5f5faf,0xff5f5fd7,0xff5f5fff,
            0xff5f8700,0xff5f875f,0xff5f8787,0xff5f87af,0xff5f87d7,0xff5f87ff,0xff5faf00,0xff5faf5f,
            0xff5faf87,0xff5fafaf,0xff5fafd7,0xff5fafff,0xff5fd700,0xff5fd75f,0xff5fd787,0xff5fd7af,
            0xff5fd7d7,0xff5fd7ff,0xff5fff00,0xff5fff5f,0xff5fff87,0xff5fffaf,0xff5fffd7,0xff5fffff,
            0xff870000,0xff87005f,0xff870087,0xff8700af,0xff8700d7,0xff8700ff,0xff875f00,0xff875f5f,
            0xff875f87,0xff875faf,0xff875fd7,0xff875fff,0xff878700,0xff87875f,0xff878787,0xff8787af,
            0xff8787d7,0xff8787ff,0xff87af00,0xff87af5f,0xff87af87,0xff87afaf,0xff87afd7,0xff87afff,
            0xff87d700,0xff87d75f,0xff87d787,0xff87d7af,0xff87d7d7,0xff87d7ff,0xff87ff00,0xff87ff5f,
            0xff87ff87,0xff87ffaf,0xff87ffd7,0xff87ffff,0xffaf0000,0xffaf005f,0xffaf0087,0xffaf00af,
            0xffaf00d7,0xffaf00ff,0xffaf5f00,0xffaf5f5f,0xffaf5f87,0xffaf5faf,0xffaf5fd7,0xffaf5fff,
            0xffaf8700,0xffaf875f,0xffaf8787,0xffaf87af,0xffaf87d7,0xffaf87ff,0xffafaf00,0xffafaf5f,
            0xffafaf87,0xffafafaf,0xffafafd7,0xffafafff,0xffafd700,0xffafd75f,0xffafd787,0xffafd7af,
            0xffafd7d7,0xffafd7ff,0xffafff00,0xffafff5f,0xffafff87,0xffafffaf,0xffafffd7,0xffafffff,
            0xffd70000,0xffd7005f,0xffd70087,0xffd700af,0xffd700d7,0xffd700ff,0xffd75f00,0xffd75f5f,
            0xffd75f87,0xffd75faf,0xffd75fd7,0xffd75fff,0xffd78700,0xffd7875f,0xffd78787,0xffd787af,
            0xffd787d7,0xffd787ff,0xffd7af00,0xffd7af5f,0xffd7af87,0xffd7afaf,0xffd7afd7,0xffd7afff,
            0xffd7d700,0xffd7d75f,0xffd7d787,0xffd7d7af,0xffd7d7d7,0xffd7d7ff,0xffd7ff00,0xffd7ff5f,
            0xffd7ff87,0xffd7ffaf,0xffd7ffd7,0xffd7ffff,0xffff0000,0xffff005f,0xffff0087,0xffff00af,
            0xffff00d7,0xffff00ff,0xffff5f00,0xffff5f5f,0xffff5f87,0xffff5faf,0xffff5fd7,0xffff5fff,
            0xffff8700,0xffff875f,0xffff8787,0xffff87af,0xffff87d7,0xffff87ff,0xffffaf00,0xffffaf5f,
            0xffffaf87,0xffffafaf,0xffffafd7,0xffffafff,0xffffd700,0xffffd75f,0xffffd787,0xffffd7af,
            0xffffd7d7,0xffffd7ff,0xffffff00,0xffffff5f,0xffffff87,0xffffffaf,0xffffffd7,0xffffffff,
            0xff080808,0xff121212,0xff1c1c1c,0xff262626,0xff303030,0xff3a3a3a,0xff444444,0xff4e4e4e,
            0xff585858,0xff626262,0xff6c6c6c,0xff767676,0xff808080,0xff8a8a8a,0xff949494,0xff9e9e9e,
            0xffa8a8a8,0xffb2b2b2,0xffbcbcbc,0xffc6c6c6,0xffd0d0d0,0xffdadada,0xffe4e4e4,0xffeeeeee,
        };
        return clut;
    }

    /// rgb 各6階調 + 40色(抜き1. )
    static const unsigned* clut_g6r6b6c40() {
        static const unsigned clut[] = {
         #if 0
         #elif 1
            0x00000000,
            0xff000000,0xff000033,0xff000066,0xff000099,0xff0000cc,0xff0000ff,
            0xff330000,0xff330033,0xff330066,0xff330099,0xff3300cc,0xff3300ff,
            0xff660000,0xff660033,0xff660066,0xff660099,0xff6600cc,0xff6600ff,
            0xff990000,0xff990033,0xff990066,0xff990099,0xff9900cc,0xff9900ff,
            0xffcc0000,0xffcc0033,0xffcc0066,0xffcc0099,0xffcc00cc,0xffcc00ff,
            0xffff0000,0xffff0033,0xffff0066,0xffff0099,0xffff00cc,0xffff00ff,
            0xff003300,0xff003333,0xff003366,0xff003399,0xff0033cc,0xff0033ff,
            0xff333300,0xff333333,0xff333366,0xff333399,0xff3333cc,0xff3333ff,
            0xff663300,0xff663333,0xff663366,0xff663399,0xff6633cc,0xff6633ff,
            0xff993300,0xff993333,0xff993366,0xff993399,0xff9933cc,0xff9933ff,
            0xffcc3300,0xffcc3333,0xffcc3366,0xffcc3399,0xffcc33cc,0xffcc33ff,
            0xffff3300,0xffff3333,0xffff3366,0xffff3399,0xffff33cc,0xffff33ff,
            0xff006600,0xff006633,0xff006666,0xff006699,0xff0066cc,0xff0066ff,
            0xff336600,0xff336633,0xff336666,0xff336699,0xff3366cc,0xff3366ff,
            0xff666600,0xff666633,0xff666666,0xff666699,0xff6666cc,0xff6666ff,
            0xff996600,0xff996633,0xff996666,0xff996699,0xff9966cc,0xff9966ff,
            0xffcc6600,0xffcc6633,0xffcc6666,0xffcc6699,0xffcc66cc,0xffcc66ff,
            0xffff6600,0xffff6633,0xffff6666,0xffff6699,0xffff66cc,0xffff66ff,
            0xff009900,0xff009933,0xff009966,0xff009999,0xff0099cc,0xff0099ff,
            0xff339900,0xff339933,0xff339966,0xff339999,0xff3399cc,0xff3399ff,
            0xff669900,0xff669933,0xff669966,0xff669999,0xff6699cc,0xff6699ff,
            0xff999900,0xff999933,0xff999966,0xff999999,0xff9999cc,0xff9999ff,
            0xffcc9900,0xffcc9933,0xffcc9966,0xffcc9999,0xffcc99cc,0xffcc99ff,
            0xffff9900,0xffff9933,0xffff9966,0xffff9999,0xffff99cc,0xffff99ff,
            0xff00cc00,0xff00cc33,0xff00cc66,0xff00cc99,0xff00cccc,0xff00ccff,
            0xff33cc00,0xff33cc33,0xff33cc66,0xff33cc99,0xff33cccc,0xff33ccff,
            0xff66cc00,0xff66cc33,0xff66cc66,0xff66cc99,0xff66cccc,0xff66ccff,
            0xff99cc00,0xff99cc33,0xff99cc66,0xff99cc99,0xff99cccc,0xff99ccff,
            0xffcccc00,0xffcccc33,0xffcccc66,0xffcccc99,0xffcccccc,0xffccccff,
            0xffffcc00,0xffffcc33,0xffffcc66,0xffffcc99,0xffffcccc,0xffffccff,
            0xff00ff00,0xff00ff33,0xff00ff66,0xff00ff99,0xff00ffcc,0xff00ffff,
            0xff33ff00,0xff33ff33,0xff33ff66,0xff33ff99,0xff33ffcc,0xff33ffff,
            0xff66ff00,0xff66ff33,0xff66ff66,0xff66ff99,0xff66ffcc,0xff66ffff,
            0xff99ff00,0xff99ff33,0xff99ff66,0xff99ff99,0xff99ffcc,0xff99ffff,
            0xffccff00,0xffccff33,0xffccff66,0xffccff99,0xffccffcc,0xffccffff,
            0xffffff00,0xffffff33,0xffffff66,0xffffff99,0xffffffcc,0xffffffff,
            0xff111111,0xff222222,0xff444444,0xff555555,0xff777777,
            0xff888888,0xffaaaaaa,0xffbbbbbb,0xffdddddd,0xffeeeeee,
            0xff000088,0xff0000ff,0xff880000,0xff880088,0xff8800ff,0xffff0000,
            0xffff0088,0xffff00ff,0xff008800,0xff008888,0xff0088ff,0xff888800,
            0xff888888,0xff8888ff,0xffff8800,0xffff8888,0xffff88ff,0xff00ff00,
            0xff00ff88,0xff00ffff,0xff88ff00,0xff88ff88,0xff88ffff,0xffffff00,0xffffff88,
            0xffccaa99,0xffddbbaa,0xffeeccbb,0xffffddcc,
         #elif 1
            0x00000000,
            0xff000000,0xff000033,0xff000066,0xff000099,0xff0000cc,0xff0000ff,
            0xff330000,0xff330033,0xff330066,0xff330099,0xff3300cc,0xff3300ff,
            0xff660000,0xff660033,0xff660066,0xff660099,0xff6600cc,0xff6600ff,
            0xff990000,0xff990033,0xff990066,0xff990099,0xff9900cc,0xff9900ff,
            0xffcc0000,0xffcc0033,0xffcc0066,0xffcc0099,0xffcc00cc,0xffcc00ff,
            0xffff0000,0xffff0033,0xffff0066,0xffff0099,0xffff00cc,0xffff00ff,
            0xff003300,0xff003333,0xff003366,0xff003399,0xff0033cc,0xff0033ff,
            0xff333300,0xff333333,0xff333366,0xff333399,0xff3333cc,0xff3333ff,
            0xff663300,0xff663333,0xff663366,0xff663399,0xff6633cc,0xff6633ff,
            0xff993300,0xff993333,0xff993366,0xff993399,0xff9933cc,0xff9933ff,
            0xffcc3300,0xffcc3333,0xffcc3366,0xffcc3399,0xffcc33cc,0xffcc33ff,
            0xffff3300,0xffff3333,0xffff3366,0xffff3399,0xffff33cc,0xffff33ff,
            0xff006600,0xff006633,0xff006666,0xff006699,0xff0066cc,0xff0066ff,
            0xff336600,0xff336633,0xff336666,0xff336699,0xff3366cc,0xff3366ff,
            0xff666600,0xff666633,0xff666666,0xff666699,0xff6666cc,0xff6666ff,
            0xff996600,0xff996633,0xff996666,0xff996699,0xff9966cc,0xff9966ff,
            0xffcc6600,0xffcc6633,0xffcc6666,0xffcc6699,0xffcc66cc,0xffcc66ff,
            0xffff6600,0xffff6633,0xffff6666,0xffff6699,0xffff66cc,0xffff66ff,
            0xff009900,0xff009933,0xff009966,0xff009999,0xff0099cc,0xff0099ff,
            0xff339900,0xff339933,0xff339966,0xff339999,0xff3399cc,0xff3399ff,
            0xff669900,0xff669933,0xff669966,0xff669999,0xff6699cc,0xff6699ff,
            0xff999900,0xff999933,0xff999966,0xff999999,0xff9999cc,0xff9999ff,
            0xffcc9900,0xffcc9933,0xffcc9966,0xffcc9999,0xffcc99cc,0xffcc99ff,
            0xffff9900,0xffff9933,0xffff9966,0xffff9999,0xffff99cc,0xffff99ff,
            0xff00cc00,0xff00cc33,0xff00cc66,0xff00cc99,0xff00cccc,0xff00ccff,
            0xff33cc00,0xff33cc33,0xff33cc66,0xff33cc99,0xff33cccc,0xff33ccff,
            0xff66cc00,0xff66cc33,0xff66cc66,0xff66cc99,0xff66cccc,0xff66ccff,
            0xff99cc00,0xff99cc33,0xff99cc66,0xff99cc99,0xff99cccc,0xff99ccff,
            0xffcccc00,0xffcccc33,0xffcccc66,0xffcccc99,0xffcccccc,0xffccccff,
            0xffffcc00,0xffffcc33,0xffffcc66,0xffffcc99,0xffffcccc,0xffffccff,
            0xff00ff00,0xff00ff33,0xff00ff66,0xff00ff99,0xff00ffcc,0xff00ffff,
            0xff33ff00,0xff33ff33,0xff33ff66,0xff33ff99,0xff33ffcc,0xff33ffff,
            0xff66ff00,0xff66ff33,0xff66ff66,0xff66ff99,0xff66ffcc,0xff66ffff,
            0xff99ff00,0xff99ff33,0xff99ff66,0xff99ff99,0xff99ffcc,0xff99ffff,
            0xffccff00,0xffccff33,0xffccff66,0xffccff99,0xffccffcc,0xffccffff,
            0xffffff00,0xffffff33,0xffffff66,0xffffff99,0xffffffcc,0xffffffff,
            0xff111111,0xff222222,0xff444444,0xff555555,0xff777777,0xff888888,0xffaaaaaa,0xffbbbbbb,
            0xffdddddd,0xffeeeeee,0xff000088,0xff008800,0xff008888,0xff880000,0xff880088,0xff888800,
            0xff000044,0xff004400,0xff004444,0xff440000,0xff440044,0xff444400,0xff0000bb,0xff00bb00,
            0xff00bbbb,0xffbb0000,0xffbb00bb,0xffbbbb00,0xff0000ee,0xff00ee00,0xff00eeee,0xffee0000,
            0xffee00ee,0xffeeee00,0xff007700,0xff007777,0xff770000,0xff770077,0xff777700,
         #elif 1
            0x00000000,
            // 6x6x6 は省略.
            0xff000077,0xff007700,0xff007777,0xff770000,0xff770077,0xff777700,
            0xff333377,0xff337733,0xff337777,0xff773333,0xff773377,0xff777733,
            0xff999977,0xff997799,0xff997777,0xff779999,0xff779977,0xff777799,
            0xffcccc77,0xffcc77cc,0xffcc7777,0xff77cccc,0xff77cc77,0xff7777cc,
            0xffffff77,0xffff77ff,0xffff7777,0xff77ffff,0xff77ff77,0xff7777ff,
            0xff222222,0xff444444,0xff555555,0xff777777,0xff888888,0xffaaaaaa,
            0xffbbbbbb,0xffdddddd,0xffeeeeee,
         #elif 1
            // 6x6x6 は省略.
            0xff00007f,0xff007f00,0xff007f7f,0xff7f0000,0xff7f007f,0xff7f7f00,
            0xff33337f,0xff337f33,0xff337f7f,0xff7f3333,0xff7f337f,0xff7f7f33,
            0xffcccc7f,0xffcc7fcc,0xffcc7f7f,0xff7fcccc,0xff7fcc7f,0xff7f7fcc,
            0xffffff7f,0xffff7fff,0xffff7f7f,0xff7fffff,0xff7fff7f,0xff7f7fff,
            0xff33334c,0xff334c33,0xff334c4c,0xff4c3333,0xff4c334c,0xff4c4c33,
            0xff9999b2,0xff99b299,0xff99b2b2,0xffb29999,0xffb299b2,0xffb2b299,
            //0xff191919,0xff4c4c4c,0xff7f7f7f,0xffb2b2b2,0xffe5e5e5,
            0xff4c4c4c,0xff7f7f7f,0xffb2b2b2,
            0x00000000,
         #elif 1
            // 6x6x6 は省略.
            //0xff191919,0xff4c4c4c,0xff7f7f7f,0xffb2b2b2,0xffe5e5e5,
            //0xff191919,
            0xff4c4c4c,
            0xff4c4c66,0xff4c664c,0xff4c6666,0xff664c4c,0xff664c66,0xff66664c,
            0xff66667f,0xff667f66,0xff667f7f,0xff7f6666,0xff7f667f,0xff7f7f66,
            0xff7f7f7f,
            0xff7f7f99,0xff7f997f,0xff7f9999,0xff997f7f,0xff997f99,0xff99997f,
            0xff9999b2,0xff99b299,0xff99b2b2,0xffb29999,0xffb299b2,0xffb2b299,
            0xffb2b2b2,
            0xffb2b2cc,0xffb2ccb2,0xffb2cccc,0xffccb2b2,0xffccb2cc,0xffccccb2,
            0xffcccce5,0xffcce5cc,0xffcce5e5,0xffe5cccc,0xffe5cce5,0xffe5e5cc,
            //0xffe5e5e5,
            //0xffe5e5ff,0xffe5ffe5,0xffe5ffff,0xffffe5e5,0xffffe5ff,0xffffffe5,
            0x00000000,
         #else  // old
            0xff000000,0xff000033,0xff000066,0xff000099,0xff0000cc,0xff0000ff,
            0xff330000,0xff330033,0xff330066,0xff330099,0xff3300cc,0xff3300ff,
            0xff660000,0xff660033,0xff660066,0xff660099,0xff6600cc,0xff6600ff,
            0xff990000,0xff990033,0xff990066,0xff990099,0xff9900cc,0xff9900ff,
            0xffcc0000,0xffcc0033,0xffcc0066,0xffcc0099,0xffcc00cc,0xffcc00ff,
            0xffff0000,0xffff0033,0xffff0066,0xffff0099,0xffff00cc,0xffff00ff,
            0xff003300,0xff003333,0xff003366,0xff003399,0xff0033cc,0xff0033ff,
            0xff333300,0xff333333,0xff333366,0xff333399,0xff3333cc,0xff3333ff,
            0xff663300,0xff663333,0xff663366,0xff663399,0xff6633cc,0xff6633ff,
            0xff993300,0xff993333,0xff993366,0xff993399,0xff9933cc,0xff9933ff,
            0xffcc3300,0xffcc3333,0xffcc3366,0xffcc3399,0xffcc33cc,0xffcc33ff,
            0xffff3300,0xffff3333,0xffff3366,0xffff3399,0xffff33cc,0xffff33ff,
            0xff006600,0xff006633,0xff006666,0xff006699,0xff0066cc,0xff0066ff,
            0xff336600,0xff336633,0xff336666,0xff336699,0xff3366cc,0xff3366ff,
            0xff666600,0xff666633,0xff666666,0xff666699,0xff6666cc,0xff6666ff,
            0xff996600,0xff996633,0xff996666,0xff996699,0xff9966cc,0xff9966ff,
            0xffcc6600,0xffcc6633,0xffcc6666,0xffcc6699,0xffcc66cc,0xffcc66ff,
            0xffff6600,0xffff6633,0xffff6666,0xffff6699,0xffff66cc,0xffff66ff,
            0xff009900,0xff009933,0xff009966,0xff009999,0xff0099cc,0xff0099ff,
            0xff339900,0xff339933,0xff339966,0xff339999,0xff3399cc,0xff3399ff,
            0xff669900,0xff669933,0xff669966,0xff669999,0xff6699cc,0xff6699ff,
            0xff999900,0xff999933,0xff999966,0xff999999,0xff9999cc,0xff9999ff,
            0xffcc9900,0xffcc9933,0xffcc9966,0xffcc9999,0xffcc99cc,0xffcc99ff,
            0xffff9900,0xffff9933,0xffff9966,0xffff9999,0xffff99cc,0xffff99ff,
            0xff00cc00,0xff00cc33,0xff00cc66,0xff00cc99,0xff00cccc,0xff00ccff,
            0xff33cc00,0xff33cc33,0xff33cc66,0xff33cc99,0xff33cccc,0xff33ccff,
            0xff66cc00,0xff66cc33,0xff66cc66,0xff66cc99,0xff66cccc,0xff66ccff,
            0xff99cc00,0xff99cc33,0xff99cc66,0xff99cc99,0xff99cccc,0xff99ccff,
            0xffcccc00,0xffcccc33,0xffcccc66,0xffcccc99,0xffcccccc,0xffccccff,
            0xffffcc00,0xffffcc33,0xffffcc66,0xffffcc99,0xffffcccc,0xffffccff,
            0xff00ff00,0xff00ff33,0xff00ff66,0xff00ff99,0xff00ffcc,0xff00ffff,
            0xff33ff00,0xff33ff33,0xff33ff66,0xff33ff99,0xff33ffcc,0xff33ffff,
            0xff66ff00,0xff66ff33,0xff66ff66,0xff66ff99,0xff66ffcc,0xff66ffff,
            0xff99ff00,0xff99ff33,0xff99ff66,0xff99ff99,0xff99ffcc,0xff99ffff,
            0xffccff00,0xffccff33,0xffccff66,0xffccff99,0xffccffcc,0xffccffff,
            0xffffff00,0xffffff33,0xffffff66,0xffffff99,0xffffffcc,0xffffffff,

            //0xff111111,0xff222222,0xff444444,0xff555555,0xff777777,0xff888888,
            //0xffaaaaaa,0xffbbbbbb,0xffdddddd,0xffeeeeee,
            0xff1f1f1f,0xff1f1f3f,0xff1f1f6f,0xff3f1f1f,0xff3f1f3f,0xff3f1f6f,0xff6f1f1f,0xff6f1f3f,
            0xff6f1f6f,0xff1f3f1f,0xff1f3f3f,0xff1f3f6f,0xff3f3f1f,0xff3f3f3f,0xff3f3f6f,0xff6f3f1f,
            0xff6f3f3f,0xff6f3f6f,0xff1f6f1f,0xff1f6f3f,0xff1f6f6f,0xff3f6f1f,0xff3f6f3f,0xff3f6f6f,
            0xff6f6f1f,0xff6f6f3f,0xff6f6f6f,0xff1f1f1f,0xff1f1f9f,0xff9f1f1f,0xff9f1f9f,0xff1f9f1f,
            //0xff1f9f9f,0xff9f9f1f,0xff9f9f9f,0xff282828,0xff585858,0xff888888,0xffb8b8b8,0xffe8e8e8,
            0xff1f9f9f,0xff9f9f1f,0xff9f9f9f,0xff585858,0xff888888,0xffb8b8b8,0xffe8e8e8,0x00000000,
         #endif
        };
        return clut;
    }

 #if 0  // 6,6,6 系のほうが安定してるので止め.
    /// rgb 7,7,5階調 + 11色.
    static const unsigned* clut_g7r7b5c11() {
        static const unsigned clut[] = {
            0x00000000,
            0xff000000,0xff00003f,0xff00007f,0xff0000bf,0xff0000ff,
            0xff2a0000,0xff2a003f,0xff2a007f,0xff2a00bf,0xff2a00ff,
            0xff550000,0xff55003f,0xff55007f,0xff5500bf,0xff5500ff,
            0xff7f0000,0xff7f003f,0xff7f007f,0xff7f00bf,0xff7f00ff,
            0xffaa0000,0xffaa003f,0xffaa007f,0xffaa00bf,0xffaa00ff,
            0xffd40000,0xffd4003f,0xffd4007f,0xffd400bf,0xffd400ff,
            0xffff0000,0xffff003f,0xffff007f,0xffff00bf,0xffff00ff,
            0xff002a00,0xff002a3f,0xff002a7f,0xff002abf,0xff002aff,
            0xff2a2a00,0xff2a2a3f,0xff2a2a7f,0xff2a2abf,0xff2a2aff,
            0xff552a00,0xff552a3f,0xff552a7f,0xff552abf,0xff552aff,
            0xff7f2a00,0xff7f2a3f,0xff7f2a7f,0xff7f2abf,0xff7f2aff,
            0xffaa2a00,0xffaa2a3f,0xffaa2a7f,0xffaa2abf,0xffaa2aff,
            0xffd42a00,0xffd42a3f,0xffd42a7f,0xffd42abf,0xffd42aff,
            0xffff2a00,0xffff2a3f,0xffff2a7f,0xffff2abf,0xffff2aff,
            0xff005500,0xff00553f,0xff00557f,0xff0055bf,0xff0055ff,
            0xff2a5500,0xff2a553f,0xff2a557f,0xff2a55bf,0xff2a55ff,
            0xff555500,0xff55553f,0xff55557f,0xff5555bf,0xff5555ff,
            0xff7f5500,0xff7f553f,0xff7f557f,0xff7f55bf,0xff7f55ff,
            0xffaa5500,0xffaa553f,0xffaa557f,0xffaa55bf,0xffaa55ff,
            0xffd45500,0xffd4553f,0xffd4557f,0xffd455bf,0xffd455ff,
            0xffff5500,0xffff553f,0xffff557f,0xffff55bf,0xffff55ff,
            0xff007f00,0xff007f3f,0xff007f7f,0xff007fbf,0xff007fff,
            0xff2a7f00,0xff2a7f3f,0xff2a7f7f,0xff2a7fbf,0xff2a7fff,
            0xff557f00,0xff557f3f,0xff557f7f,0xff557fbf,0xff557fff,
            0xff7f7f00,0xff7f7f3f,0xff7f7f7f,0xff7f7fbf,0xff7f7fff,
            0xffaa7f00,0xffaa7f3f,0xffaa7f7f,0xffaa7fbf,0xffaa7fff,
            0xffd47f00,0xffd47f3f,0xffd47f7f,0xffd47fbf,0xffd47fff,
            0xffff7f00,0xffff7f3f,0xffff7f7f,0xffff7fbf,0xffff7fff,
            0xff00aa00,0xff00aa3f,0xff00aa7f,0xff00aabf,0xff00aaff,
            0xff2aaa00,0xff2aaa3f,0xff2aaa7f,0xff2aaabf,0xff2aaaff,
            0xff55aa00,0xff55aa3f,0xff55aa7f,0xff55aabf,0xff55aaff,
            0xff7faa00,0xff7faa3f,0xff7faa7f,0xff7faabf,0xff7faaff,
            0xffaaaa00,0xffaaaa3f,0xffaaaa7f,0xffaaaabf,0xffaaaaff,
            0xffd4aa00,0xffd4aa3f,0xffd4aa7f,0xffd4aabf,0xffd4aaff,
            0xffffaa00,0xffffaa3f,0xffffaa7f,0xffffaabf,0xffffaaff,
            0xff00d400,0xff00d43f,0xff00d47f,0xff00d4bf,0xff00d4ff,
            0xff2ad400,0xff2ad43f,0xff2ad47f,0xff2ad4bf,0xff2ad4ff,
            0xff55d400,0xff55d43f,0xff55d47f,0xff55d4bf,0xff55d4ff,
            0xff7fd400,0xff7fd43f,0xff7fd47f,0xff7fd4bf,0xff7fd4ff,
            0xffaad400,0xffaad43f,0xffaad47f,0xffaad4bf,0xffaad4ff,
            0xffd4d400,0xffd4d43f,0xffd4d47f,0xffd4d4bf,0xffd4d4ff,
            0xffffd400,0xffffd43f,0xffffd47f,0xffffd4bf,0xffffd4ff,
            0xff00ff00,0xff00ff3f,0xff00ff7f,0xff00ffbf,0xff00ffff,
            0xff2aff00,0xff2aff3f,0xff2aff7f,0xff2affbf,0xff2affff,
            0xff55ff00,0xff55ff3f,0xff55ff7f,0xff55ffbf,0xff55ffff,
            0xff7fff00,0xff7fff3f,0xff7fff7f,0xff7fffbf,0xff7fffff,
            0xffaaff00,0xffaaff3f,0xffaaff7f,0xffaaffbf,0xffaaffff,
            0xffd4ff00,0xffd4ff3f,0xffd4ff7f,0xffd4ffbf,0xffd4ffff,
            0xffffff00,0xffffff3f,0xffffff7f,0xffffffbf,0xffffffff,
            0xff2a2a2a,0xff555555,0xffaaaaaa,0xffd4d4d4,0xff3f3f3f,
            0xff3f553f,0xff553f3f,0xff553f55,0xff55553f,0xffbfbfbf,
        };
        return clut;
    }
 #endif

 #if 0  // 駄目すぎた.
    /// rgb yuvベースで生成.
    static const unsigned* clut_yuv() {
        static const unsigned clut[] = {
            // yuv 5,7,7
            0xff0000e4,0xff000198,0xff000f4c,0xff0010e4,0xff001e01,0xff001f98,0xff002d00,0xff002e4c,
            0xff002fe4,0xff003b00,0xff003c01,0xff003e98,0xff004a00,0xff004b00,0xff004c4c,0xff0050ff,
            0xff005a00,0xff005b01,0xff005fd8,0xff006800,0xff006a00,0xff006e8c,0xff006fff,0xff007800,
            0xff007c41,0xff007dd8,0xff008700,0xff008b00,0xff008c8c,0xff009a00,0xff009b41,0xff00a800,
            0xff00aa00,0xff00afff,0xff00b800,0xff00bdff,0xff00c700,0xff00cccc,0xff00db81,0xff00ea35,
            0xff00f800,0xff00ff00,0xff010001,0xff01004c,0xff010098,0xff0100e4,0xff010e00,0xff011d00,
            0xff012c00,0xff0532ff,0xff0541d8,0xff054f8c,0xff055e41,0xff056d00,0xff057b00,0xff058a00,
            0xff0990ff,0xff099fff,0xff09aecc,0xff09bc81,0xff09cb35,0xff09da00,0xff09e800,0xff0defff,
            0xff0dfdff,0xff0dff00,0xff0dff2a,0xff0dff75,0xff0dffc1,0xff0dffff,0xff3c0000,0xff3c0000,
            0xff3c0001,0xff3c004c,0xff3c0098,0xff3c00e4,0xff3c0d00,0xff4113ff,0xff4122d8,0xff41318c,
            0xff413f41,0xff414e00,0xff415d00,0xff416c00,0xff4572ff,0xff4581ff,0xff458fcc,0xff459e81,
            0xff45ad35,0xff45bb00,0xff45ca00,0xff49d0ff,0xff49dfff,0xff49eeff,0xff49fcc1,0xff49ff00,
            0xff49ff2a,0xff49ff75,0xff4dff1e,0xff4dff6a,0xff4dffb5,0xff4dffff,0xff4dffff,0xff4dffff,
            0xff4dffff,0xff780000,0xff780000,0xff780000,0xff780001,0xff78004c,0xff780098,0xff7800e4,
            0xff7c00ff,0xff7c04d8,0xff7c128c,0xff7c2141,0xff7c3000,0xff7c3e00,0xff7c4d00,0xff8153ff,
            0xff8162ff,0xff8171cc,0xff817f81,0xff818e35,0xff819d00,0xff81ac00,0xff85b2ff,0xff85c1ff,
            0xff85cfff,0xff85dec1,0xff85ed75,0xff85fb2a,0xff85ff00,0xff89ff1e,0xff89ff6a,0xff89ffb5,
            0xff89ffff,0xff89ffff,0xff89ffff,0xff89ffff,0xffb40000,0xffb40000,0xffb40000,0xffb40001,
            0xffb4004c,0xffb40098,0xffb400e4,0xffb8008c,0xffb800d8,0xffb800ff,0xffb80341,0xffb81100,
            0xffb82000,0xffb82f00,0xffbc35ff,0xffbc44ff,0xffbc52cc,0xffbc6181,0xffbc7035,0xffbc7e00,
            0xffbc8d00,0xffc193ff,0xffc1a2ff,0xffc1b1ff,0xffc1bfc1,0xffc1ce75,0xffc1dd2a,0xffc1ec00,
            0xffc5f2ff,0xffc5ff1e,0xffc5ff6a,0xffc5ffb5,0xffc5ffff,0xffc5ffff,0xffc5ffff,0xfff40000,
            0xfff40041,0xfff4008c,0xfff400d8,0xfff400ff,0xfff40100,0xfff41000,0xfff816ff,0xfff825ff,
            0xfff834cc,0xfff84381,0xfff85135,0xfff86000,0xfff86f00,0xfffc75ff,0xfffc84ff,0xfffc92ff,
            0xfffca1c1,0xfffcb075,0xfffcbe2a,0xfffccd00,0xffff00ff,0xffff07ff,0xffff15cc,0xffff2481,
            0xffff3335,0xffff38ff,0xffff4100,0xffff47ff,0xffff5000,0xffff55ff,0xffff56ff,0xffff64c1,
            0xffff65ff,0xffff7375,0xffff74ff,0xffff78ff,0xffff812a,0xffff83c1,0xffff87ff,0xffff9000,
            0xffff9175,0xffff95ff,0xffff96ff,0xffffa02a,0xffffa4ff,0xffffa5ff,0xffffaf00,0xffffb3b5,
            0xffffb4ff,0xffffb5ff,0xffffc16a,0xffffc3ff,0xffffc4ff,0xffffd01e,0xffffd1b5,0xffffd2ff,
            0xffffd3ff,0xffffe06a,0xffffe1ff,0xffffe2ff,0xffffef1e,0xfffff0b5,0xfffff1ff,0xfffffe6a,
            0xffffff1e,0xffffff1e,0xffffff6a,0xffffffb5,0xffffffff,0x00000000,0x00000000,0x00000000,
            0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
        };
        return clut;
    }
 #endif
};





/** デフォルトパレットの作成.
 * bpp : 3,4,6,8   typ : 0=jpn 1=pcat/win
 */
template<class A>
void FixedClut256<A>::getFixedClut256(unsigned *clut, unsigned clutSize, unsigned bpp, unsigned typ)
{
    assert(clutSize > 0);
    if (clutSize > 256)
        clutSize = 256;
    memset(clut, 0, clutSize * sizeof(clut[0]));

    unsigned        l;
    const unsigned* s;
    if (bpp < 6) {
        #if 0
        if (bpp <= 1) {
            l = 2;
            s = clut2();
        } else if (bpp <= 2) {
            l = 4;
            s = clut4();
        } else 
        #endif
        if (bpp < 4) {
            l = 8;
            s = typ ? clutBGR111() : clutGRB111();
        } else {
            l = 16;
            s = typ ? clutWin16() : clutJpn16();
        }
    } else {
        if (bpp <= 6) {
            l = 64;
            s = clutGRB222();
        } else if (bpp <= 7) {
            l = 128;
            s = clut_g5r5b5c3();
        } else {
            l = 256;
            switch (typ) {
            default:
            case 0: s = clutGRB332(); break;
            case 1: s = clutWin256(); break;
            case 2: s = clutXterm256(); break;
            case 3: s = clut_g6r6b6c40(); break;
            //case 4: s = clut_g7r7b5c11(); break;
            //case 5: s = clut_yuv(); break;
            }
        }
    }
    if (l > clutSize)
        l = clutSize;
    memcpy(clut, s, l * sizeof(clut[0]));
}


/// 32ビット色画を8ビット色画に変換.
template<class A>
bool FixedClut256<A>::decreaseColor(unsigned char* pDst, const unsigned* pSrc, unsigned w, unsigned h
                                , const unsigned* pClut, unsigned clutSize, unsigned idx, int alp1, int alp2, int type)
{
    assert(clutSize <= 256 && clutSize >= idx+2);
    enum { ALP_D = 2 };
    enum { DN = 8-1 }; // 予め15ビット色(以下)にされてる場合を想定.

    // 指定のclutで、すべてのピクセルをclutSize色化.
    // 近い色の条件として,
    //   - a,r,g,bの値が近いモノ(色同士の差が小さいモノ)
    //   - 1色内のr,g,bの輝度の大小関係が、近いモノ.
    // をチェック.
    for (unsigned j = 0; j < w * h; ++j) {
        unsigned ii = 0;
        unsigned c  = pSrc[j];
        int      a  = c >> 24;
        int      r  = (unsigned char)(c >> 16);
        int      g  = (unsigned char)(c >>  8);
        int      b  = (unsigned char)(c);
        int      o  = g - r;
        int      p  = r - b;
        int      q  = b - g;
        if (type) {
            o = (o < 0) ? -1 : (o > 0) ? 1 : 0;
            p = (p < 0) ? -1 : (p > 0) ? 1 : 0;
            q = (q < 0) ? -1 : (q > 0) ? 1 : 0;
        }

        a = (a < alp1) ? 0 : (a >= alp2) ? 255 : a;
        unsigned k  = 0xFFFFFFFF;
        unsigned k2 = 0xFFFFFFFF;
        for (unsigned i = idx; i < clutSize; ++i) {
            unsigned ic = pClut[i];
            int      ia = ic >> 24;
            ia = (ia < alp1) ? 0 : (ia > alp2) ? 255 : ia;
            int      ir = (unsigned char)(ic >> 16);
            int      ig = (unsigned char)(ic >>  8);
            int      ib = (unsigned char)(ic);
            int      io = ig - ir;
            int      ip = ir - ib;
            int      iq = ib - ig;
            if (type) {
                io = (io < 0) ? -1 : (io > 0) ? 1 : 0;
                ip = (ip < 0) ? -1 : (ip > 0) ? 1 : 0;
                iq = (iq < 0) ? -1 : (iq > 0) ? 1 : 0;
            }

            int      aa = ia - a;
            int      gg = ig - g;
            int      rr = ir - r;
            int      bb = ib - b;

            int     oio = o * io;
            int     pip = p * ip;
            int     qiq = q * iq;

         #if 1
            bool    chk = false;
            if (type) {
                chk =  (o == io && p == ip && q == iq)
                    || (oio >= 0 &&  p == ip && q == iq)
                    || (o == io && pip >= 0 && q == iq)
                    || (o == io && p == ip && qiq >= 0)
                    || (oio >= 0 &&  pip >= 0 && q == iq)
                    || (o == io && pip >= 0 && qiq >= 0)
                    || (oio >= 0 && p == ip && qiq >= 0) ;
            } else {
                chk = (oio >= 0 && pip >= 0 && qiq >= 0);
            }
            if (chk) {
                int      oo = io - o;
                int      pp = ip - p;
                int      qq = iq - q;
                unsigned ik  = 3*aa*aa + gg*gg + rr*rr + bb*bb;
                unsigned ik2 = oo*oo + pp*pp + qq*qq;
                if (ik + DN*DN <= k || (ik <=k && ik2 < k2)) {
                    k   = ik;
                    k2  = ik2;
                    ii  = i;
                }
            }
         #else  // old
            int      oo = io - o;
            int      pp = ip - p;
            int      qq = iq - q;
            unsigned ik = 3*aa*aa + gg*gg + rr*rr + bb*bb + oo*oo + pp*pp + qq*qq;
            if (ik < k) {
                k  = ik;
                ii = i;
            }
         #endif
        }
        pDst[j] = ii;
    }

    return true;
}


/// 32ビット色画をデジタル8色画に変換.
template<class A> bool
FixedClut256<A>::decreaseColorRGB111(unsigned char* pDst, const unsigned* pSrc, unsigned w, unsigned h, bool winFlag, bool ex)
{
    assert(w > 0 && h > 0);
    size_t wh = w * h;
    size_t ri = 0x80, gi = 0x80, bi = 0x80;
    if (ex) {
	    size_t rd = 0, gd = 0, bd = 0;
	    size_t rn[256] = {0}, gn[256] = {0}, bn[256] = {0};
	    for (unsigned j = 0; j < wh; ++j) {
	        unsigned c  = pSrc[j];
	        int      a  = c >> 24;
	        int      r  = (unsigned char)(c >> 16);
	        int      g  = (unsigned char)(c >>  8);
	        int      b  = (unsigned char)(c);
	        ++rn[r];
	        ++gn[g];
	        ++bn[b];
	        rd += r;
	        gd += g;
	        bd += b;
	    }
	    rd /= wh;
	    gd /= wh;
	    bd /= wh;

	 #if 1
	    ri = 0, gi = 0, bi = 0;
	    size_t rt = 0, gt = 0, bt = 0;
	    size_t tt = wh / 2;
	    for (ri = 0; ri < 256; ++ri) {
	        rt += rn[ri];
	        if (rt >= tt) {
	            break;
	        }
	    }
	    for (gi = 0; gi < 256; ++gi) {
	        gt += gn[gi];
	        if (gt >= tt) {
	            break;
	        }
	    }
	    for (bi = 0; bi < 256; ++bi) {
	        bt += bn[bi];
	        if (bt >= tt) {
	            break;
	        }
	    }

	  #if 0 // test2
	  #else // test3
	    ri = (ri + rd) / 2; if (ri == 0) ri = 0xff;
	    gi = (gi + gd) / 2; if (gi == 0) gi = 0xff;
	    bi = (bi + bd) / 2; if (bi == 0) bi = 0xff;
	  #endif
	 #else // test1
	    ri = rd;
	    gi = gd;
	    bi = bd;
	 #endif
	}

    unsigned bm = 1, rm = 2, gm = 4;	// JP  GRB
    if (winFlag) {
        rm = 1, gm = 2, bm = 4;			// Win RGB
    }
    for (unsigned j = 0; j < wh; ++j) {
        unsigned ii = 0;
        unsigned c  = pSrc[j];
        int      a  = c >> 24;
        int      r  = (unsigned char)(c >> 16);
        int      g  = (unsigned char)(c >>  8);
        int      b  = (unsigned char)(c);
        unsigned tc = 0;
        if (g >= gi)
            tc |= gm;
        if (r >= ri)
            tc |= rm;
        if (b >= bi)
            tc |= bm;
        pDst[j] = tc;
    }

    return true;
}


/// 32ビット色画を固定16色画に変換.
template<class A> bool
FixedClut256<A>::decreaseColorRGB_bpp4(unsigned char* pDst, const unsigned* pSrc, unsigned w, unsigned h, bool winFlag)
{
	enum { D = (255 / 3)+1 };
	unsigned const* clut = winFlag ? clutWin16() : clutJpn16();
    signed char tbl222[2*2*2];
	for (unsigned i = 0; i < 2*2*2; ++i)
		tbl222[i] = -1;
	signed char tbl333[3*3*3];
	for (unsigned i = 0; i < 3*3*3; ++i)
		tbl333[i] = -1;
	int whtCC = -1;
	for (unsigned i = 0; i < 16; ++i) {
        unsigned c  = clut[i];
        unsigned r  = (unsigned char)(c >> 16);
        unsigned g  = (unsigned char)(c >>  8);
        unsigned b  = (unsigned char)(c);
		unsigned ri = r / D;
		unsigned gi = g / D;
		unsigned bi = b / D;
		if (ri > 1 && gi > 1 && bi > 1 && r < 0xd4 && g < 0xd4 && b < 0xd4) {
			whtCC = i;
		} else {
			tbl333[ri * 9 + gi * 3 + bi] = i;
    		auto& t2 = tbl222[(r == 0xff) * 4u + (g == 0xff) * 2u + (b == 0xff)];
    		if (t2 < 0)
    			t2 = i;
        }
	}

	size_t wh = w * h;
    for (size_t j = 0; j < wh; ++j) {
        unsigned c  = pSrc[j];
        //int    a  = c >> 24;
        int      r  = (unsigned char)(c >> 16);
        int      g  = (unsigned char)(c >>  8);
        int      b  = (unsigned char)(c);
		int		 ri = r / D;
		int		 gi = g / D;
		int		 bi = b / D;
        if (ri == 0 && bi > 0) {
            static int s_i;
            ++s_i;
        }
		if (ri > 1 && gi > 1 && bi > 1 && r < 0xd4 && g < 0xd4 && b < 0xd4) {
			pDst[j] = whtCC;
		} else {
			int ii = tbl333[ri*9+gi*3+bi];
			if (ii < 0)
				ii = tbl222[(r>>7)*4u + (g>>7)*2u + (b>>7)];
			pDst[j] = ii;
		}
    }

    return true;
}

#endif
