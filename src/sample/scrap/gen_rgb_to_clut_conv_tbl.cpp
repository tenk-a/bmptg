/*
   RGB値から clut インデクス値を求めるための変換テーブル.
 */
#include <stdio.h>
#include <stdint.h>
#include <algorithm>
#include <string.h>
#include <map>
#include <assert.h>

enum { clutSize = 256 };
static const uint32_t clut[clutSize] = {
 #if 1
    0x00000000,
    0xff000000,0xff000033,0xff000066,0xff000099,0xff0000cc,0xff0000ff,
    0xff330000,0xff330033,0xff330066,0xff330099,0xff3300cc,0xff3300ff,
    0xff660000,0xff660033,0xff660066,0xff660099,0xff6600cc,0xff6600ff,
    0xff990000,0xff990033,0xff990066,0xff990099,0xff9900cc,0xff9900ff,
    0xffcc0000,0xffcc0033,0xffcc0066,0xffcc0099,0xffcc00cc,0xffcc00ff,
    0xffff0000,0xffff0033,0xffff0066,0xffff0099,0xffff00cc,0xffff00ff,
    0xff003300,0xff003333,0xff003366,0xff003399,0xff0033cc,0xff0033ff,
    0xff333300,0xff333333,0xff333366,0xff333399,0xff3333cc,0xff3333ff,
    0xff663300,0xff663333,0xff663366,0xff663399,0xff6633cc,0xff6633ff,
    0xff993300,0xff993333,0xff993366,0xff993399,0xff9933cc,0xff9933ff,
    0xffcc3300,0xffcc3333,0xffcc3366,0xffcc3399,0xffcc33cc,0xffcc33ff,
    0xffff3300,0xffff3333,0xffff3366,0xffff3399,0xffff33cc,0xffff33ff,
    0xff006600,0xff006633,0xff006666,0xff006699,0xff0066cc,0xff0066ff,
    0xff336600,0xff336633,0xff336666,0xff336699,0xff3366cc,0xff3366ff,
    0xff666600,0xff666633,0xff666666,0xff666699,0xff6666cc,0xff6666ff,
    0xff996600,0xff996633,0xff996666,0xff996699,0xff9966cc,0xff9966ff,
    0xffcc6600,0xffcc6633,0xffcc6666,0xffcc6699,0xffcc66cc,0xffcc66ff,
    0xffff6600,0xffff6633,0xffff6666,0xffff6699,0xffff66cc,0xffff66ff,
    0xff009900,0xff009933,0xff009966,0xff009999,0xff0099cc,0xff0099ff,
    0xff339900,0xff339933,0xff339966,0xff339999,0xff3399cc,0xff3399ff,
    0xff669900,0xff669933,0xff669966,0xff669999,0xff6699cc,0xff6699ff,
    0xff999900,0xff999933,0xff999966,0xff999999,0xff9999cc,0xff9999ff,
    0xffcc9900,0xffcc9933,0xffcc9966,0xffcc9999,0xffcc99cc,0xffcc99ff,
    0xffff9900,0xffff9933,0xffff9966,0xffff9999,0xffff99cc,0xffff99ff,
    0xff00cc00,0xff00cc33,0xff00cc66,0xff00cc99,0xff00cccc,0xff00ccff,
    0xff33cc00,0xff33cc33,0xff33cc66,0xff33cc99,0xff33cccc,0xff33ccff,
    0xff66cc00,0xff66cc33,0xff66cc66,0xff66cc99,0xff66cccc,0xff66ccff,
    0xff99cc00,0xff99cc33,0xff99cc66,0xff99cc99,0xff99cccc,0xff99ccff,
    0xffcccc00,0xffcccc33,0xffcccc66,0xffcccc99,0xffcccccc,0xffccccff,
    0xffffcc00,0xffffcc33,0xffffcc66,0xffffcc99,0xffffcccc,0xffffccff,
    0xff00ff00,0xff00ff33,0xff00ff66,0xff00ff99,0xff00ffcc,0xff00ffff,
    0xff33ff00,0xff33ff33,0xff33ff66,0xff33ff99,0xff33ffcc,0xff33ffff,
    0xff66ff00,0xff66ff33,0xff66ff66,0xff66ff99,0xff66ffcc,0xff66ffff,
    0xff99ff00,0xff99ff33,0xff99ff66,0xff99ff99,0xff99ffcc,0xff99ffff,
    0xffccff00,0xffccff33,0xffccff66,0xffccff99,0xffccffcc,0xffccffff,
    0xffffff00,0xffffff33,0xffffff66,0xffffff99,0xffffffcc,0xffffffff,
    0xff111111,0xff222222,0xff444444,0xff555555,0xff777777,
    0xff888888,0xffaaaaaa,0xffbbbbbb,0xffdddddd,0xffeeeeee,
    0xff000088,0xff0000ff,0xff880000,0xff880088,0xff8800ff,0xffff0000,
    0xffff0088,0xffff00ff,0xff008800,0xff008888,0xff0088ff,0xff888800,
    0xff888888,0xff8888ff,0xffff8800,0xffff8888,0xffff88ff,0xff00ff00,
    0xff00ff88,0xff00ffff,0xff88ff00,0xff88ff88,0xff88ffff,0xffffff00,0xffffff88,
    0xffccaa99,0xffddbbaa,0xffeeccbb,0xffffddcc,
 #else
    0x00000000,
    0xff000000,0xff000033,0xff000066,0xff000099,0xff0000cc,0xff0000ff,
    0xff330000,0xff330033,0xff330066,0xff330099,0xff3300cc,0xff3300ff,
    0xff660000,0xff660033,0xff660066,0xff660099,0xff6600cc,0xff6600ff,
    0xff990000,0xff990033,0xff990066,0xff990099,0xff9900cc,0xff9900ff,
    0xffcc0000,0xffcc0033,0xffcc0066,0xffcc0099,0xffcc00cc,0xffcc00ff,
    0xffff0000,0xffff0033,0xffff0066,0xffff0099,0xffff00cc,0xffff00ff,
    0xff003300,0xff003333,0xff003366,0xff003399,0xff0033cc,0xff0033ff,
    0xff333300,0xff333333,0xff333366,0xff333399,0xff3333cc,0xff3333ff,
    0xff663300,0xff663333,0xff663366,0xff663399,0xff6633cc,0xff6633ff,
    0xff993300,0xff993333,0xff993366,0xff993399,0xff9933cc,0xff9933ff,
    0xffcc3300,0xffcc3333,0xffcc3366,0xffcc3399,0xffcc33cc,0xffcc33ff,
    0xffff3300,0xffff3333,0xffff3366,0xffff3399,0xffff33cc,0xffff33ff,
    0xff006600,0xff006633,0xff006666,0xff006699,0xff0066cc,0xff0066ff,
    0xff336600,0xff336633,0xff336666,0xff336699,0xff3366cc,0xff3366ff,
    0xff666600,0xff666633,0xff666666,0xff666699,0xff6666cc,0xff6666ff,
    0xff996600,0xff996633,0xff996666,0xff996699,0xff9966cc,0xff9966ff,
    0xffcc6600,0xffcc6633,0xffcc6666,0xffcc6699,0xffcc66cc,0xffcc66ff,
    0xffff6600,0xffff6633,0xffff6666,0xffff6699,0xffff66cc,0xffff66ff,
    0xff009900,0xff009933,0xff009966,0xff009999,0xff0099cc,0xff0099ff,
    0xff339900,0xff339933,0xff339966,0xff339999,0xff3399cc,0xff3399ff,
    0xff669900,0xff669933,0xff669966,0xff669999,0xff6699cc,0xff6699ff,
    0xff999900,0xff999933,0xff999966,0xff999999,0xff9999cc,0xff9999ff,
    0xffcc9900,0xffcc9933,0xffcc9966,0xffcc9999,0xffcc99cc,0xffcc99ff,
    0xffff9900,0xffff9933,0xffff9966,0xffff9999,0xffff99cc,0xffff99ff,
    0xff00cc00,0xff00cc33,0xff00cc66,0xff00cc99,0xff00cccc,0xff00ccff,
    0xff33cc00,0xff33cc33,0xff33cc66,0xff33cc99,0xff33cccc,0xff33ccff,
    0xff66cc00,0xff66cc33,0xff66cc66,0xff66cc99,0xff66cccc,0xff66ccff,
    0xff99cc00,0xff99cc33,0xff99cc66,0xff99cc99,0xff99cccc,0xff99ccff,
    0xffcccc00,0xffcccc33,0xffcccc66,0xffcccc99,0xffcccccc,0xffccccff,
    0xffffcc00,0xffffcc33,0xffffcc66,0xffffcc99,0xffffcccc,0xffffccff,
    0xff00ff00,0xff00ff33,0xff00ff66,0xff00ff99,0xff00ffcc,0xff00ffff,
    0xff33ff00,0xff33ff33,0xff33ff66,0xff33ff99,0xff33ffcc,0xff33ffff,
    0xff66ff00,0xff66ff33,0xff66ff66,0xff66ff99,0xff66ffcc,0xff66ffff,
    0xff99ff00,0xff99ff33,0xff99ff66,0xff99ff99,0xff99ffcc,0xff99ffff,
    0xffccff00,0xffccff33,0xffccff66,0xffccff99,0xffccffcc,0xffccffff,
    0xffffff00,0xffffff33,0xffffff66,0xffffff99,0xffffffcc,0xffffffff,
    0xff000077,0xff007700,0xff007777,0xff770000,0xff770077,0xff777700,
    0xff333377,0xff337733,0xff337777,0xff773333,0xff773377,0xff777733,
    0xff999977,0xff997799,0xff997777,0xff779999,0xff779977,0xff777799,
    0xffcccc77,0xffcc77cc,0xffcc7777,0xff77cccc,0xff77cc77,0xff7777cc,
    0xffffff77,0xffff77ff,0xffff7777,0xff77ffff,0xff77ff77,0xff7777ff,
    0xff222222,0xff444444,0xff555555,0xff777777,0xff888888,0xffaaaaaa,
    0xffbbbbbb,0xffdddddd,0xffeeeeee,
 #endif
};


int main() {
    //enum { CN = 8, };
    enum { CN = 16, };
    enum { RN = CN, GN = CN, BN = CN };
    enum { DN = CN-1 }; //
    //enum { DN = 8-1 }; //
    static uint32_t rgb2clutIdxTbl[RN * GN * BN] = {0};
    enum { ON = (RN < GN ? GN : RN), PN = (RN < BN ? BN : RN), QN = (BN < GN ? GN : BN) };
    size_t idx = 0;
    for (size_t ri = 0; ri < RN; ++ri) {
        for (size_t gi = 0; gi < GN; ++gi) {
            for (size_t bi = 0; bi < BN; ++bi) {
                int     a = 255;
                int     r = ri * 255 / (RN-1);
                int     g = gi * 255 / (GN-1);
                int     b = bi * 255 / (BN-1);
                int     o  = g - r;
                int     p  = r - b;
                int     q  = b - g;
             #if 1
                o = (o < 0) ? -1 : (o > 0) ? 1 : 0;
                p = (p < 0) ? -1 : (p > 0) ? 1 : 0;
                q = (q < 0) ? -1 : (q > 0) ? 1 : 0;
             #endif
                // 近い色を探す.
                unsigned k  = 0xFFFFFFFF;
                unsigned k2 = 0xFFFFFFFF;
                unsigned fnd = 0xffffffff;
                for (unsigned i = 0; i < clutSize; ++i) {
                    unsigned ic = clut[i];
                    int      ia = ic >> 24;
                    int      ir = (unsigned char)(ic >> 16);
                    int      ig = (unsigned char)(ic >>  8);
                    int      ib = (unsigned char)(ic);
                    int      io = ig - ir;
                    int      ip = ir - ib;
                    int      iq = ib - ig;
                 #if 1
                    io = (io < 0) ? -1 : (io > 0) ? 1 : 0;
                    ip = (ip < 0) ? -1 : (ip > 0) ? 1 : 0;
                    iq = (iq < 0) ? -1 : (iq > 0) ? 1 : 0;
                 #endif

                    int      aa = ia - a;
                    int      gg = ig - g;
                    int      rr = ir - r;
                    int      bb = ib - b;

                    int      oo = io - o;
                    int      pp = ip - p;
                    int      qq = iq - q;

                    int     oio = o * io;
                    int     pip = p * ip;
                    int     qiq = q * iq;
                 #if 1
                    if (   (o == io && p == ip && q == iq)
                        || (oio >= 0 &&  p == ip && q == iq)
                        || (o == io && pip >= 0 && q == iq)
                        || (o == io && p == ip && qiq >= 0)
                    )
                 #else
                    if (oio >= 0 && pip >= 0 && qiq >= 0)
                 #endif
                    {
                        unsigned ik  = 3*aa*aa + gg*gg + rr*rr + bb*bb;
                        unsigned ik2 = oo*oo + pp*pp + qq*qq;
                        if (ik + DN*DN <= k || (ik <=k && ik2 < k2)) {
                            k   = ik;
                            k2  = ik2;
                            fnd = i;
                        }
                    }
                }
                if (fnd > 0xff) {
                    assert(fnd < 0x100);
                    break;
                }
                rgb2clutIdxTbl[idx] = fnd;
                uint32_t ic = clut[fnd];
                int      ir = (unsigned char)(ic >> 16);
                int      ig = (unsigned char)(ic >>  8);
                int      ib = (unsigned char)(ic);
                printf("\t%03d,\t// %4d #%02x%02x%02x -> #%02x%02x%02x\n", fnd, idx, r,g,b, ir, ig, ib );
                ++idx;
            }
        }
    }
    return 0;
}
